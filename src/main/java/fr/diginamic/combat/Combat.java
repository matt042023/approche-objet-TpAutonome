package fr.diginamic.combat;

import java.util.Random;
import java.util.Scanner;

/**
 * Classe g√©rant la logique de combat entre le personnage et les cr√©atures.
 * 
 * Cette classe impl√©mente les r√®gles de combat selon l'√©nonc√© :
 * - Combat au tour par tour
 * - Calcul d'attaque (force + facteur al√©atoire 1-10)
 * - Celui avec la plus forte attaque gagne le tour
 * - D√©g√¢ts = diff√©rence entre les deux attaques
 * - Combat jusqu'√† la mort d'un protagoniste
 *
 */
public class Combat {
    
    /**
     * Lance un combat entre le personnage et une cr√©ature.
     * 
     * G√®re l'int√©gralit√© du d√©roulement du combat selon les r√®gles :
     * - Affichage des statistiques initiales
     * - Boucle de combat tour par tour
     * - Calcul des attaques et r√©solution
     * - Attribution des r√©compenses en cas de victoire
     * 
     * @param perso Le personnage joueur
     * @param creature La cr√©ature √† combattre
     * @return true si le personnage gagne, false s'il perd
     */
    public static boolean lancerCombat(Personnage perso, Creature creature) {
        Scanner scanner = new Scanner(System.in);
        
        // Affichage de l'en-t√™te de combat
        System.out.println("‚öîÔ∏è Combat contre un " + creature.getNom() + " !");
        System.out.println("‚ïê".repeat(60));
        afficherStatsCombat(perso, creature);
        
        int tour = 1;
        
        // Boucle principale de combat - continue tant que les deux protagonistes sont vivants
        while (perso.estVivant() && creature.estVivant()) {
            System.out.println("\nüîÑ TOUR " + tour++);
            System.out.println("‚ïê".repeat(60));
            
            // ========== PHASE 1: CALCUL DES ATTAQUES ==========
            // Chaque protagoniste calcule son attaque selon les r√®gles
            int attaquePersonnage = perso.attaquer();
            int attaqueCreature = creature.attaquer();
            
            // Affichage des jets d'attaque
            System.out.println("üé≤ Votre jet d'attaque: " + attaquePersonnage);
            System.out.println("üé≤ " + creature.getNom() + " lance une attaque: " + attaqueCreature);
            
            // ========== PHASE 2: R√âSOLUTION DU TOUR ==========
            // Comparaison des attaques pour d√©terminer le vainqueur du tour
            if (attaquePersonnage > attaqueCreature) {
                // VICTOIRE DU PERSONNAGE
                int degats = attaquePersonnage - attaqueCreature;
                creature.appliquerDegats(degats);
                System.out.println("‚úÖ Vous remportez ce tour !");
                System.out.println("‚öîÔ∏è Vous infligez " + degats + " d√©g√¢ts √† " + creature.getNom() + " !");
                
                // V√©rification si la cr√©ature est vaincue
                if (!creature.estVivant()) {
                    System.out.println("üíÄ " + creature.getNom() + " est vaincu !");
                }
                
            } else if (attaqueCreature > attaquePersonnage) {
                // VICTOIRE DE LA CR√âATURE
                int degats = attaqueCreature - attaquePersonnage;
                perso.appliquerDegats(degats);
                System.out.println("‚ùå " + creature.getNom() + " remporte ce tour !");
                System.out.println("üí• " + creature.getNom() + " vous inflige " + degats + " d√©g√¢ts !");
                
                // V√©rification si le personnage est vaincu
                if (!perso.estVivant()) {
                    System.out.println("üíÄ Vous √™tes vaincu !");
                }
                
            } else {
                // √âGALIT√â - aucun d√©g√¢t inflig√©
                System.out.println("‚öñÔ∏è √âgalit√© ! Aucun d√©g√¢t inflig√© ce tour.");
            }
            
            // ========== PHASE 3: MISE √Ä JOUR ==========
            // Affichage des statistiques apr√®s le tour
            afficherStatsCombat(perso, creature);
            
            // Gestion des effets temporaires du personnage (bonus d'attaque)
            perso.tourSuivant();
            
            // Pause interactive avant le prochain tour (si combat continue)
            if (perso.estVivant() && creature.estVivant()) {
                System.out.print("\n‚è≥ Appuyez sur Entr√©e pour continuer...");
                scanner.nextLine();
            }
        }

        // ========== R√âSOLUTION FINALE DU COMBAT ==========
        if (perso.estVivant()) {
            // VICTOIRE DU PERSONNAGE
            System.out.println("‚úÖ Victoire !");
            
            // Attribution du score bas√© sur le type de cr√©ature vaincue
            int gainScore = switch (creature.getClass().getSimpleName()) {
                case "Loup" -> 1;      // Cr√©ature faible = 1 point
                case "Gobelin" -> 2;   // Cr√©ature moyenne = 2 points
                case "Troll" -> 5;     // Cr√©ature forte = 5 points
                default -> 0;          // S√©curit√© (ne devrait pas arriver)
            };
            perso.ajouterScore(gainScore);
            System.out.println("üèÜ Vous gagnez " + gainScore + " point(s) ! Score total: " + perso.getScore());
            
            // Chance d'obtenir une r√©compense suppl√©mentaire
            donnerRecompense(perso);
            return true;
            
        } else {
            // D√âFAITE DU PERSONNAGE
            System.out.println("üíÄ Vous √™tes mort. Score final : " + perso.getScore());
            return false;
        }
    }

    /**
     * G√®re l'attribution al√©atoire d'une r√©compense apr√®s une victoire.
     * 
     * Selon les r√®gles, le personnage a 50% de chance d'obtenir une r√©compense
     * parmi 4 possibilit√©s √©quiprobables :
     * - Potion de soin
     * - Potion d'attaque mineure  
     * - Potion d'attaque majeure
     * - Bonus de 5 points au score
     * 
     * @param personnage Le personnage qui recevra la r√©compense
     */
    private static void donnerRecompense(Personnage personnage) {
        Random rand = new Random();
        
        // Test de la probabilit√© de 50% d'obtenir une r√©compense
        if (rand.nextBoolean()) {
            // S√©lection al√©atoire du type de r√©compense (0-3)
            int typeRecompense = rand.nextInt(4);
            
            switch (typeRecompense) {
                case 0 -> {
                    // R√©compense : Potion de soin
                    personnage.ajouterPotion(new PotionSoin());
                    System.out.println("üéÅ Vous trouvez une Potion de Soin !");
                }
                case 1 -> {
                    // R√©compense : Potion d'attaque mineure
                    personnage.ajouterPotion(new PotionAttaqueMineure());
                    System.out.println("üéÅ Vous trouvez une Potion d'Attaque Mineure !");
                }
                case 2 -> {
                    // R√©compense : Potion d'attaque majeure
                    personnage.ajouterPotion(new PotionAttaqueMajeure());
                    System.out.println("üéÅ Vous trouvez une Potion d'Attaque Majeure !");
                }
                case 3 -> {
                    // R√©compense : Bonus de score
                    personnage.ajouterScore(5);
                    System.out.println("üéÅ Bonus de 5 points au score !");
                }
            }
        } else {
            // Pas de chance cette fois
            System.out.println("üö´ Pas de r√©compense cette fois...");
        }
    }

    private static String choisirAction(Scanner scanner, Personnage personnage) {
        while (true) {
            System.out.println("üéØ QUE VOULEZ-VOUS FAIRE ?");
            System.out.println("-".repeat(30));
            System.out.println("1. ‚öîÔ∏è Attaquer");
            System.out.println("2. üèÉ Fuir le combat");
            System.out.print("‚û§ Votre choix: ");
            
            String choix = scanner.nextLine();
            
            switch (choix) {
                case "1" -> {
                    return "ATTAQUER";
                }
                case "2" -> {
                    System.out.print("‚ùì √ätes-vous s√ªr de vouloir fuir ? (o/n): ");
                    String confirmation = scanner.nextLine().toLowerCase();
                    if (confirmation.equals("o") || confirmation.equals("oui")) {
                        return "FUIR";
                    }
                }
                default -> System.out.println("‚ùå Choix invalide ! Choisissez 1 ou 2.");
            }
        }
    }

    private static boolean utiliserPotionCombat(Scanner scanner, Personnage personnage) {
        System.out.println("\nüß™ POTIONS DISPONIBLES:");
        System.out.println("-".repeat(40));
        
        for (int i = 0; i < personnage.getInventaire().size(); i++) {
            System.out.println((i + 1) + ". " + personnage.getInventaire().get(i).getNom());
        }
        System.out.println("0. ‚Ü©Ô∏è Annuler");
        System.out.print("‚û§ Choisissez une potion: ");
        
        try {
            int choixPotion = Integer.parseInt(scanner.nextLine());
            
            if (choixPotion == 0) {
                return false; // Annul√©
            }
            
            if (choixPotion < 1 || choixPotion > personnage.getInventaire().size()) {
                System.out.println("‚ùå Choix invalide !");
                return false;
            }
            
            Potion potion = personnage.getInventaire().remove(choixPotion - 1);
            potion.appliquer(personnage);
            System.out.println("‚úÖ Potion utilis√©e !");
            return true;
            
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Veuillez entrer un nombre valide !");
            return false;
        }
    }

    /**
     * Affiche les statistiques actuelles des deux combattants.
     * 
     * Utilis√©e pour tenir le joueur inform√© de l'√©tat du combat
     * √† chaque tour.
     * 
     * @param perso Le personnage joueur
     * @param creature La cr√©ature adversaire
     */
    private static void afficherStatsCombat(Personnage perso, Creature creature) {
        System.out.println("üìä √âTAT DU COMBAT");
        System.out.println("-".repeat(40));
        
        // Affichage des statistiques compl√®tes du personnage
        System.out.println("üë§ " + perso.getStatuts());
        
        // Affichage des statistiques de la cr√©ature (nom + sant√©)
        System.out.println("üëπ " + creature.getNom() + " - Sant√©: " + creature.getSante() + " PV");
    }

}
